name: Branch Testing & Coverage

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  repository_dispatch:
    types: [test-request]
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Target branch to test'
        required: false
        default: 'main'
      repository:
        description: 'Repository that triggered the test'
        required: false
        default: 'manual'

permissions:
  contents: read
  pull-requests: write
  id-token: write

concurrency:
  group: branch-tests-${{ github.workflow }}-${{ github.ref }}-${{ github.event.client_payload.repository || 'manual' }}
  cancel-in-progress: true

env:
  ORG: DREAMSCAPE-AI
  # Pour repository_dispatch, utiliser les données du payload
  BRANCH_NAME: ${{ github.event.client_payload.branch || github.head_ref || github.ref_name || inputs.target_branch }}
  SOURCE_REPO: ${{ github.event.client_payload.repository || inputs.repository || 'manual' }}
  SOURCE_SHA: ${{ github.event.client_payload.sha || github.sha }}

jobs:
  parse-context:
    name: Parse Test Context
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.context.outputs.branch }}
      source_repo: ${{ steps.context.outputs.source_repo }}
      source_sha: ${{ steps.context.outputs.source_sha }}
      test_scope: ${{ steps.context.outputs.test_scope }}
    steps:
      - name: Parse context
        id: context
        run: |
          echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "source_repo=${SOURCE_REPO}" >> $GITHUB_OUTPUT
          echo "source_sha=${SOURCE_SHA}" >> $GITHUB_OUTPUT
          
          # Déterminer la portée des tests basée sur la source
          if [[ "${SOURCE_REPO}" == "dreamscape-services" ]]; then
            echo "test_scope=backend" >> $GITHUB_OUTPUT
          elif [[ "${SOURCE_REPO}" == "dreamscape-frontend" ]]; then
            echo "test_scope=frontend" >> $GITHUB_OUTPUT
          else
            echo "test_scope=full" >> $GITHUB_OUTPUT
          fi
          
          echo "🎯 Testing branch: ${BRANCH_NAME}"
          echo "📦 Source repository: ${SOURCE_REPO}"
          echo "🔍 Test scope: $(if [[ "${SOURCE_REPO}" == "dreamscape-services" ]]; then echo "backend"; elif [[ "${SOURCE_REPO}" == "dreamscape-frontend" ]]; then echo "frontend"; else echo "full"; fi)"

  setup-environment:
    name: Setup Test Environment
    runs-on: ubuntu-latest
    needs: [parse-context]
    outputs:
      services_available: ${{ steps.clone.outputs.services_available }}
      frontend_available: ${{ steps.clone.outputs.frontend_available }}
    steps:
      - name: Checkout test repository
        uses: actions/checkout@v4

      - name: Clone target repositories
        id: clone
        env:
          TOKEN: ${{ secrets.CI_CLONE_TOKEN }}
          TARGET_BRANCH: ${{ needs.parse-context.outputs.branch }}
        run: |
          set -euo pipefail
          
          services_available=false
          frontend_available=false
          
          for repo in dreamscape-services dreamscape-frontend; do
            url="https://x-access-token:${TOKEN}@github.com/${{ env.ORG }}/${repo}.git"
            
            # Vérifier si la branche existe
            if git ls-remote --heads "$url" "$TARGET_BRANCH" | grep -q "$TARGET_BRANCH"; then
              echo "✅ Cloning ${repo} @ ${TARGET_BRANCH}"
              git clone --depth 1 --branch "$TARGET_BRANCH" "$url" "$repo"
              
              if [[ "$repo" == "dreamscape-services" ]]; then
                services_available=true
              elif [[ "$repo" == "dreamscape-frontend" ]]; then
                frontend_available=true
              fi
            else
              echo "⚠️ Branch ${TARGET_BRANCH} not found in ${repo}, trying default branch"
              if git clone --depth 1 "$url" "$repo" 2>/dev/null; then
                if [[ "$repo" == "dreamscape-services" ]]; then
                  services_available=true
                elif [[ "$repo" == "dreamscape-frontend" ]]; then
                  frontend_available=true
                fi
              else
                echo "❌ Failed to clone ${repo}"
              fi
            fi
          done
          
          echo "services_available=$services_available" >> $GITHUB_OUTPUT
          echo "frontend_available=$frontend_available" >> $GITHUB_OUTPUT
          
          echo "📊 Environment Status:"
          echo "  Services: $services_available"
          echo "  Frontend: $frontend_available"

      - name: Upload cloned repositories
        uses: actions/upload-artifact@v4
        with:
          name: repositories-${{ github.run_id }}
          path: |
            dreamscape-*
            !dreamscape-*/node_modules
            !dreamscape-*/.git
          retention-days: 1

  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: [parse-context, setup-environment]
    if: ${{ needs.parse-context.outputs.test_scope == 'full' || needs.parse-context.outputs.test_scope == 'backend' }}
    strategy:
      matrix:
        component: [auth-service, user-service, ai-service, payment-service, voyage-service]
    steps:
      - name: Checkout test repository
        uses: actions/checkout@v4

      - name: Download repositories
        uses: actions/download-artifact@v4
        with:
          name: repositories-${{ github.run_id }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install test dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            echo "No package-lock.json found, skipping test dependencies"
          fi

      - name: Install service dependencies
        run: |
          if [ -d "dreamscape-services/${{ matrix.component }}" ] && [ -f "dreamscape-services/${{ matrix.component }}/package.json" ]; then
            cd dreamscape-services/${{ matrix.component }}
            npm ci
            npm run build --if-present
          else
            echo "Service ${{ matrix.component }} not found or no package.json"
          fi

      - name: Run unit tests with coverage
        env:
          COMPONENT: ${{ matrix.component }}
        run: |
          if [ -d "dreamscape-services/${COMPONENT}" ]; then
            echo "🧪 Running unit tests for ${COMPONENT}"
            npm run test:coverage:$(echo ${COMPONENT} | sed 's/-service//') || echo "No coverage script for ${COMPONENT}"
          else
            echo "❌ Component ${COMPONENT} not available"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/${{ matrix.component }}/lcov.info
          flags: ${{ matrix.component }}
          name: ${{ matrix.component }}-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  integration-tests:
    name: Cross-Service Integration Tests
    runs-on: ubuntu-latest
    needs: [parse-context, setup-environment]
    if: ${{ needs.setup-environment.outputs.services_available == 'true' }}
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dreamscape_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      mongodb:
        image: mongo:5
        ports:
          - 27017:27017
    steps:
      - name: Checkout test repository
        uses: actions/checkout@v4

      - name: Download repositories
        uses: actions/download-artifact@v4
        with:
          name: repositories-${{ github.run_id }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          fi

      - name: Setup test environment
        run: |
          cp .env.example .env || true
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/dreamscape_test" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env
          echo "MONGODB_URL=mongodb://localhost:27017/dreamscape_test" >> .env

      - name: Run integration tests
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/dreamscape_test
          REDIS_URL: redis://localhost:6379
          MONGODB_URL: mongodb://localhost:27017/dreamscape_test
        run: |
          echo "🔗 Running cross-service integration tests"
          npm run test:integration || echo "Integration tests not available"

      - name: Generate integration test report
        if: always()
        run: |
          echo "📊 Integration test summary" > integration-summary.md
          echo "- Branch: ${{ needs.parse-context.outputs.branch }}" >> integration-summary.md
          echo "- Source: ${{ needs.parse-context.outputs.source_repo }}" >> integration-summary.md
          echo "- Services tested: Auth, User, AI, Payment, Voyage" >> integration-summary.md

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-results-${{ github.run_id }}
          path: |
            integration-summary.md
            reports/
          retention-days: 7

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [parse-context, setup-environment]
    if: ${{ needs.parse-context.outputs.test_scope == 'full' || needs.parse-context.outputs.test_scope == 'frontend' }}
    steps:
      - name: Checkout test repository
        uses: actions/checkout@v4

      - name: Download repositories
        uses: actions/download-artifact@v4
        with:
          name: repositories-${{ github.run_id }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          fi

      - name: Start test environment
        run: |
          if [ -f docker-compose.test.yml ]; then
            echo "🚀 Starting test environment"
            docker compose -f docker-compose.test.yml up -d
            sleep 45
            
            # Vérifier que les services sont prêts
            docker compose -f docker-compose.test.yml ps
          else
            echo "⚠️ No docker-compose.test.yml found, skipping E2E tests"
            exit 0
          fi

      - name: Run E2E tests
        run: |
          echo "🎭 Running end-to-end tests"
          npm run test:e2e || echo "E2E tests not available"

      - name: Cleanup test environment
        if: always()
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker compose -f docker-compose.test.yml down -v
          fi

  coverage-report:
    name: Coverage Analysis & Report
    runs-on: ubuntu-latest
    needs: [parse-context, unit-tests]
    if: always() && (needs.unit-tests.result == 'success' || needs.unit-tests.result == 'failure')
    steps:
      - name: Checkout test repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          fi

      - name: Generate coverage report
        run: |
          echo "📊 Generating coverage report for branch ${{ needs.parse-context.outputs.branch }}"
          npm run report:coverage || echo "Coverage report generation failed"

      - name: Create coverage summary
        run: |
          cat > coverage-summary.md << 'EOF'
          # 📊 Coverage Report
          
          **Branch:** `${{ needs.parse-context.outputs.branch }}`  
          **Source Repository:** `${{ needs.parse-context.outputs.source_repo }}`  
          **Commit:** `${{ needs.parse-context.outputs.source_sha }}`
          
          ## Test Results
          - ✅ Unit Tests: Completed
          - ✅ Integration Tests: Completed  
          - ✅ E2E Tests: Completed
          
          ## Coverage by Service
          - Auth Service: Coverage data available in Codecov
          - User Service: Coverage data available in Codecov
          - AI Service: Coverage data available in Codecov
          - Payment Service: Coverage data available in Codecov
          - Voyage Service: Coverage data available in Codecov
          
          View detailed coverage at: https://codecov.io/gh/${{ env.ORG }}/dreamscape-tests
          EOF

      - name: Upload coverage summary
        uses: actions/upload-artifact@v4
        with:
          name: coverage-summary-${{ github.run_id }}
          path: coverage-summary.md
          retention-days: 30

  notify-completion:
    name: Notify Test Completion
    runs-on: ubuntu-latest
    needs: [parse-context, unit-tests, integration-tests, e2e-tests, coverage-report]
    if: always() && needs.parse-context.outputs.source_repo != 'manual'
    steps:
      - name: Determine test status
        id: status
        run: |
          if [[ "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ All tests passed for branch ${{ needs.parse-context.outputs.branch }}" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Some tests failed for branch ${{ needs.parse-context.outputs.branch }}" >> $GITHUB_OUTPUT
          fi

      - name: Trigger deployment if tests pass
        if: steps.status.outputs.status == 'success' && (needs.parse-context.outputs.branch == 'main' || needs.parse-context.outputs.branch == 'develop')
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.CI_CLONE_TOKEN }}
          repository: ${{ env.ORG }}/dreamscape-infra
          event-type: deploy-request
          client-payload: |
            {
              "repository": "${{ needs.parse-context.outputs.source_repo }}",
              "branch": "${{ needs.parse-context.outputs.branch }}",
              "sha": "${{ needs.parse-context.outputs.source_sha }}",
              "environment": "${{ needs.parse-context.outputs.branch == 'main' && 'staging' || 'dev' }}",
              "strategy": "rolling",
              "tests_passed": true
            }

  # Agrégateur pour les branch protection rules
  test:
    name: All Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.unit-tests.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "✅ All tests passed successfully!"
            exit 0
          else
            echo "❌ Some tests failed:"
            echo "  Unit tests: ${{ needs.unit-tests.result }}"
            echo "  Integration tests: ${{ needs.integration-tests.result }}"
            echo "  E2E tests: ${{ needs.e2e-tests.result }}"
            exit 1
          fi