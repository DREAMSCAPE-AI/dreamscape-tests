# CI/CD Pipeline for Dreamscape Tests
name: Dreamscape Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: |
          cd dreamscape-tests
          npm install
      - name: Setup test environment
        run: |
          cd dreamscape-tests
          npm run setup

  unit-tests:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [voyage-service, web-client, panorama-service]
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: |
          cd dreamscape-tests
          npm install
      - name: Run unit tests
        run: |
          cd dreamscape-tests
          npm run test:unit
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./dreamscape-tests/coverage/lcov.info
          name: ${{ matrix.service }}-coverage

  integration-tests:
    needs: setup
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:5
        ports:
          - 27017:27017
      redis:
        image: redis:7
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: |
          cd dreamscape-tests
          npm install
      - name: Start mock services
        run: |
          cd dreamscape-tests
          npm run mock:start &
          sleep 5
      - name: Run integration tests
        run: |
          cd dreamscape-tests
          npm run test:integration
        env:
          TEST_DATABASE_URL: mongodb://localhost:27017/dreamscape_test
          REDIS_URL: redis://localhost:6379

  e2e-tests:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: |
          cd dreamscape-tests
          npm install
      - name: Start services
        run: |
          # Start all microservices for E2E testing
          docker-compose -f docker-compose.test.yml up -d
          sleep 30
      - name: Run E2E tests
        run: |
          cd dreamscape-tests
          npm run test:e2e
      - name: Stop services
        run: |
          docker-compose -f docker-compose.test.yml down

  performance-tests:
    needs: [unit-tests, integration-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: |
          cd dreamscape-tests
          npm install
      - name: Run performance tests
        run: |
          cd dreamscape-tests
          npm run test:performance
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: ./dreamscape-tests/reports/performance/

  security-tests:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: |
          cd dreamscape-tests
          npm install
      - name: Run security tests
        run: |
          cd dreamscape-tests
          npm run test:security
      - name: Upload security results
        uses: actions/upload-artifact@v3
        with:
          name: security-results
          path: ./dreamscape-tests/reports/security/

  accessibility-tests:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: |
          cd dreamscape-tests
          npm install
      - name: Run accessibility tests
        run: |
          cd dreamscape-tests
          npm run test:accessibility
      - name: Upload accessibility results
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-results
          path: ./dreamscape-tests/reports/accessibility/

  report:
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, security-tests, accessibility-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: |
          cd dreamscape-tests
          npm install
      - name: Generate comprehensive report
        run: |
          cd dreamscape-tests
          npm run report
      - name: Upload test reports
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: ./dreamscape-tests/reports/
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = './dreamscape-tests/reports/test-summary.md';
            if (fs.existsSync(path)) {
              const summary = fs.readFileSync(path, 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }